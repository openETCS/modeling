/*
Formalization of Subset-026-7 (Chapter 7: ERTMS/ETCS language)
    
- Name: subset-026-7.scade
- Description: UNISIG SUBSET-026-7, ISSUE : 3.3.0, 3.5 ERTMS/ETCS language)  
- Copyright (c) Siemens AG, 2013

- Licensed under the EUPL V.1.1 ( http://joinup.ec.europa.eu/software/page/eupl/licence-eupl )
- Gist URL: none
- Cryptography: No
- Author(s): SiemensRailAutomation

Disclaimer:

The use of this software is limited to NON-vital applications. 
It has NOT been developed for vital operation purposes and MUST NOT be used for applications 
which may cause harm to people, physical accidents or financial loss. 

THEREFORE, NO LIABILITY WILL BE GIVEN FOR SUCH AND ANY OTHER KIND OF USE. 

Changelog:
2015-10-12 T_TRAIN real -> int 
*/

type A_NVMAXREDADH1 = real	 /* MinVal = 0.0, MaxVal = 3.15 */  ; 
type A_NVMAXREDADH2 = real	 /* MinVal = 0.0, MaxVal = 3.15 */  ; 
type A_NVMAXREDADH3 = real	 /* MinVal = 0.0, MaxVal = 3.15 */  ; 
type A_NVP12 = real	 /* MinVal = 0.0, MaxVal = 3.15 */  ; 
type A_NVP23 = real	 /* MinVal = 0.0, MaxVal = 3.15 */  ; 
type D_ADHESION = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_AXLELOAD = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_CURRENT = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_CYCLOC = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 1111 1111 = The_train_has_not_to_report_cyclically_its_position 
  ; 
type D_DP = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_EMERGENCYSTOP = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_ENDTIMERSTARTLOC = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_GRADIENT = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_INFILL = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_LEVELTR = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Now_(The_level_transition_is_performed_upon_receipt_of_the_order) 
  ; 
type D_LINK = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_LOC = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_LOOP = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Distance_not_known 
  ; 
type D_LRBG = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Unknown 
  ; 
type D_LX = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_MAMODE = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_NVOVTRP = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_NVPOTRP = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_NVROLL = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = infinite 
  ; 
type D_NVSTFF = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = infinite 
  ; 
type D_OL = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_PBD = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_PBDSR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_POSOFF = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_RBCTR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_REF = int	 /* MinVal = -32768, MaxVal = 32767 */  ; 
type D_REVERSE = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = represents_infinite 
  ; 
type D_SECTIONTIMERSTOPLOC = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_SR = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Represents_infinite 
  ; 
type D_STARTOL = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_STARTREVERSE = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_STATIC = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_SUITABILITY = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_TAFDISPLAY = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_TEXTDISPLAY = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = The_display_of_the_text_shall_not_be_distance_limited 
  ; 
type D_TRACKINIT = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_TRACKCOND = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_TRACTION = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_TSR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type D_VALIDNV = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Now_(National_Values_are_immediately_applicable) 
  ; 
type G_A = int	 /* MinVal = 0, MaxVal = 254 */	 -- 255 = Non_numerical_value_telling_that_the_current_gradient_description_ends_at_D_GRADIENT(n) 
  ; 
type G_PBDSR = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type G_TSR = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type L_ACKLEVELTR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_ACKMAMODE = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_ADHESION = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_AXLELOAD = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_DOUBTOVER = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Unknown 
  ; 
type L_DOUBTUNDER = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Unknown 
  ; 
type L_ENDSECTION = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_LOOP = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Length_not_known 
  ; 
type L_LX = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_MAMODE = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = Infinite_length 
  ; 
type L_MESSAGE = int	 /* MinVal = 0, MaxVal = 1023 */  ; 
type L_NVKRINT = enum { 
	#pragma kcg enum_val 0 #end L_NVKRINT_0m ,
	#pragma kcg enum_val 1 #end L_NVKRINT_25m ,
	#pragma kcg enum_val 2 #end L_NVKRINT_50m ,
	#pragma kcg enum_val 3 #end L_NVKRINT_75m ,
	#pragma kcg enum_val 4 #end L_NVKRINT_100m ,
	#pragma kcg enum_val 5 #end L_NVKRINT_150m ,
	#pragma kcg enum_val 6 #end L_NVKRINT_200m ,
	#pragma kcg enum_val 7 #end L_NVKRINT_300m ,
	#pragma kcg enum_val 8 #end L_NVKRINT_400m ,
	#pragma kcg enum_val 9 #end L_NVKRINT_500m ,
	#pragma kcg enum_val 10 #end L_NVKRINT_600m ,
	#pragma kcg enum_val 11 #end L_NVKRINT_700m ,
	#pragma kcg enum_val 12 #end L_NVKRINT_800m ,
	#pragma kcg enum_val 13 #end L_NVKRINT_900m ,
	#pragma kcg enum_val 14 #end L_NVKRINT_1000m ,
	#pragma kcg enum_val 15 #end L_NVKRINT_1100m ,
	#pragma kcg enum_val 16 #end L_NVKRINT_1200m ,
	#pragma kcg enum_val 17 #end L_NVKRINT_1300m ,
	#pragma kcg enum_val 18 #end L_NVKRINT_1400m ,
	#pragma kcg enum_val 19 #end L_NVKRINT_1500m ,
	#pragma kcg enum_val 20 #end L_NVKRINT_1600m ,
	#pragma kcg enum_val 21 #end L_NVKRINT_1700m ,
	#pragma kcg enum_val 22 #end L_NVKRINT_1800m ,
	#pragma kcg enum_val 23 #end L_NVKRINT_1900m ,
	#pragma kcg enum_val 24 #end L_NVKRINT_2000m ,
	#pragma kcg enum_val 25 #end L_NVKRINT_2100m ,
	#pragma kcg enum_val 26 #end L_NVKRINT_2200m ,
	#pragma kcg enum_val 27 #end L_NVKRINT_2300m ,
	#pragma kcg enum_val 28 #end L_NVKRINT_2400m ,
	#pragma kcg enum_val 29 #end L_NVKRINT_2500m ,
	#pragma kcg enum_val 30 #end L_NVKRINT_2600m ,
	#pragma kcg enum_val 31 #end L_NVKRINT_2700m 
}; 
type L_PACKET = int	 /* MinVal = 0, MaxVal = 8191 */  ; 
type L_PBDSR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_REVERSEAREA = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_SECTION = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_STOPLX = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_TAFDISPLAY = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_TEXT = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type L_TEXTDISPLAY = int	 /* MinVal = 0, MaxVal = 32766 */	 -- 32767 = The_display_of_the_text_shall_not_be_distance_limited 
  ; 
type L_TRACKCOND = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_TRAIN = int	 /* MinVal = 0, MaxVal = 4095 */  ; 
type L_TRAININT = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type L_TSR = int	 /* MinVal = 0, MaxVal = 32767 */  ; 
type M_ACK = enum { 
	#pragma kcg enum_val 0 #end M_ACK_No_acknowledgement_required ,
	#pragma kcg enum_val 1 #end M_ACK_Acknowledgement_required 
}; 
type M_ADHESION = enum { 
	#pragma kcg enum_val 0 #end M_ADHESION_Slippery_rail ,
	#pragma kcg enum_val 1 #end M_ADHESION_Non_slippery_rail 
}; 
type M_AIRTIGHT = enum { 
	#pragma kcg enum_val 0 #end M_AIRTIGHT_Not_fitted ,
	#pragma kcg enum_val 1 #end M_AIRTIGHT_Fitted 
}; 
type M_AXLELOADCAT = enum { 
	#pragma kcg enum_val 0 #end M_AXLELOADCAT_A ,
	#pragma kcg enum_val 1 #end M_AXLELOADCAT_HS17 ,
	#pragma kcg enum_val 2 #end M_AXLELOADCAT_B1 ,
	#pragma kcg enum_val 3 #end M_AXLELOADCAT_B2 ,
	#pragma kcg enum_val 4 #end M_AXLELOADCAT_C2 ,
	#pragma kcg enum_val 5 #end M_AXLELOADCAT_C3 ,
	#pragma kcg enum_val 6 #end M_AXLELOADCAT_C4 ,
	#pragma kcg enum_val 7 #end M_AXLELOADCAT_D2 ,
	#pragma kcg enum_val 8 #end M_AXLELOADCAT_D3 ,
	#pragma kcg enum_val 9 #end M_AXLELOADCAT_D4 ,
	#pragma kcg enum_val 10 #end M_AXLELOADCAT_D4XL ,
	#pragma kcg enum_val 11 #end M_AXLELOADCAT_E4 ,
	#pragma kcg enum_val 12 #end M_AXLELOADCAT_E5 
}; 
type M_DUP = enum { 
	#pragma kcg enum_val 0 #end M_DUP_No_duplicates ,
	#pragma kcg enum_val 1 #end M_DUP_This_balise_is_a_duplicate_of_the_next_balise ,
	#pragma kcg enum_val 2 #end M_DUP_This_balise_is_a_duplicate_of_the_previous_balise 
}; 
type M_CURRENT = int	 /* MinVal = 0, MaxVal = 10000 */	 -- 1023 = No_restriction_for_current_consumption 
  ; 

type M_ERROR = enum { 
	#pragma kcg enum_val 0 #end M_ERROR_Balise_group_linking_consistency_error ,
	#pragma kcg enum_val 1 #end M_ERROR_Linked_balise_group_message_consistency_erro ,
	#pragma kcg enum_val 2 #end M_ERROR_Unlinked_balise_group_message_consistency_error ,
	#pragma kcg enum_val 3 #end M_ERROR_Radio_message_consistency_error ,
	#pragma kcg enum_val 4 #end M_ERROR_Radio_sequence_error ,
	#pragma kcg enum_val 5 #end M_ERROR_Radio_safe_radio_connection_error ,
	#pragma kcg enum_val 6 #end M_ERROR_Safety_critical_failure ,
	#pragma kcg enum_val 7 #end M_ERROR_Double_linking_error ,
	#pragma kcg enum_val 8 #end M_ERROR_Double_repositioning_error 
}; 
type M_LEVEL = enum { 
	#pragma kcg enum_val 0 #end M_LEVEL_Level_0 ,
	#pragma kcg enum_val 1 #end M_LEVEL_Level_NTC_specified_by_NID_NTC ,
	#pragma kcg enum_val 2 #end M_LEVEL_Level_1 ,
	#pragma kcg enum_val 3 #end M_LEVEL_Level_2 ,
	#pragma kcg enum_val 4 #end M_LEVEL_Level_3 
}; 
type M_LEVELTEXTDISPLAY = enum { 
	#pragma kcg enum_val 0 #end M_LEVELTEXTDISPLAY_Level_0 ,
	#pragma kcg enum_val 1 #end M_LEVELTEXTDISPLAY_Level_NTC_specified_by_NID_NTC ,
	#pragma kcg enum_val 2 #end M_LEVELTEXTDISPLAY_Level_1 ,
	#pragma kcg enum_val 3 #end M_LEVELTEXTDISPLAY_Level_2 ,
	#pragma kcg enum_val 4 #end M_LEVELTEXTDISPLAY_Level_3 ,
	#pragma kcg enum_val 5 #end M_LEVELTEXTDISPLAY_The_display_of_the_text_shall_not_be_limited_by_the_level 
}; 
type M_LEVELTR = enum { 
	#pragma kcg enum_val 0 #end M_LEVELTR_Level_0 ,
	#pragma kcg enum_val 1 #end M_LEVELTR_Level_NTC_specified_by_NID_NTC ,
	#pragma kcg enum_val 2 #end M_LEVELTR_Level_1 ,
	#pragma kcg enum_val 3 #end M_LEVELTR_Level_2 ,
	#pragma kcg enum_val 4 #end M_LEVELTR_Level_3 
}; 
type M_LINEGAUGE = enum { 
	#pragma kcg enum_val 1 #end M_LINEGAUGE_G1 ,
	#pragma kcg enum_val 2 #end M_LINEGAUGE_GA ,
	#pragma kcg enum_val 4 #end M_LINEGAUGE_GB ,
	#pragma kcg enum_val 8 #end M_LINEGAUGE_GC 
}; 
type M_LOADINGGAUGE = enum { 
	#pragma kcg enum_val 0 #end M_LOADINGGAUGE_The_train_does_not_fit_to_any_of_the_interoperable_loading_gauge_profiles ,
	#pragma kcg enum_val 1 #end M_LOADINGGAUGE_G1 ,
	#pragma kcg enum_val 2 #end M_LOADINGGAUGE_GA ,
	#pragma kcg enum_val 3 #end M_LOADINGGAUGE_GB ,
	#pragma kcg enum_val 4 #end M_LOADINGGAUGE_GC 
}; 
type M_LOC = enum { 
	#pragma kcg enum_val 0 #end M_LOC_Now ,
	#pragma kcg enum_val 1 #end M_LOC_Every_LRBG_compliant_balise_group ,
	#pragma kcg enum_val 2 #end M_LOC_Do_not_send_position_report_on_passage_of_LRBG_compliant_balise_group 
}; 
type M_MAMODE = enum { 
	#pragma kcg enum_val 0 #end M_MAMODE_On_Sight ,
	#pragma kcg enum_val 1 #end M_MAMODE_Shunting ,
	#pragma kcg enum_val 2 #end M_MAMODE_Limited_Supervision 
}; 
type M_MCOUNT = int	 /* MinVal = 0, MaxVal = 253 */	 -- 254 = The_telegram_never_fits_any_message_of_the_group 
	 -- 255 = The_telegram_fits_with_all_telegrams_of_the_same_balise_group 
  ; 
type M_MODE = enum { 
	#pragma kcg enum_val 0 #end M_MODE_Full_Supervision ,
	#pragma kcg enum_val 1 #end M_MODE_On_Sight ,
	#pragma kcg enum_val 2 #end M_MODE_Staff_Responsible ,
	#pragma kcg enum_val 3 #end M_MODE_Shunting ,
	#pragma kcg enum_val 4 #end M_MODE_Unfitted ,
	#pragma kcg enum_val 5 #end M_MODE_Sleeping ,
	#pragma kcg enum_val 6 #end M_MODE_Stand_By ,
	#pragma kcg enum_val 7 #end M_MODE_Trip ,
	#pragma kcg enum_val 8 #end M_MODE_Post_Trip ,
	#pragma kcg enum_val 9 #end M_MODE_System_Failure ,
	#pragma kcg enum_val 10 #end M_MODE_Isolation ,
	#pragma kcg enum_val 11 #end M_MODE_Non_Leading ,
	#pragma kcg enum_val 12 #end M_MODE_Limited_Supervision ,
	#pragma kcg enum_val 13 #end M_MODE_National_System ,
	#pragma kcg enum_val 14 #end M_MODE_Reversing ,
	#pragma kcg enum_val 15 #end M_MODE_Passive_Shunting ,
	#pragma kcg enum_val 16 #end M_MODE_No_Power 
}; 
type M_MODETEXTDISPLAY = enum { 
	#pragma kcg enum_val 0 #end M_MODETEXTDISPLAY_Full_Supervision ,
	#pragma kcg enum_val 1 #end M_MODETEXTDISPLAY_On_Sight ,
	#pragma kcg enum_val 2 #end M_MODETEXTDISPLAY_Staff_Responsible ,
	#pragma kcg enum_val 4 #end M_MODETEXTDISPLAY_Unfitted ,
	#pragma kcg enum_val 6 #end M_MODETEXTDISPLAY_Stand_By ,
	#pragma kcg enum_val 7 #end M_MODETEXTDISPLAY_Trip ,
	#pragma kcg enum_val 8 #end M_MODETEXTDISPLAY_Post_Trip ,
	#pragma kcg enum_val 11 #end M_MODETEXTDISPLAY_Non_Leading ,
	#pragma kcg enum_val 12 #end M_MODETEXTDISPLAY_Limited_Supervision ,
	#pragma kcg enum_val 14 #end M_MODETEXTDISPLAY_Reversing ,
	#pragma kcg enum_val 15 #end M_MODETEXTDISPLAY_The_display_of_the_text_shall_not_be_limited_by_the_mode 
}; 
type M_NVAVADH = real	 /* MinVal = 0.0, MaxVal = 1.0 */  ; 
type M_NVCONTACT = enum { 
	#pragma kcg enum_val 0 #end M_NVCONTACT_Train_trip ,
	#pragma kcg enum_val 1 #end M_NVCONTACT_Apply_service_brake ,
	#pragma kcg enum_val 2 #end M_NVCONTACT_No_Reaction 
}; 
type M_NVDERUN = enum { 
	#pragma kcg enum_val 0 #end M_NVDERUN_No ,
	#pragma kcg enum_val 1 #end M_NVDERUN_Yes 
}; 
type M_NVEBCL = enum { 
	#pragma kcg enum_val 0 #end M_NVEBCL_Confidence_level_50 ,
	#pragma kcg enum_val 1 #end M_NVEBCL_Confidence_level_90 ,
	#pragma kcg enum_val 2 #end M_NVEBCL_Confidence_level_99 ,
	#pragma kcg enum_val 3 #end M_NVEBCL_Confidence_level_99_9 ,
	#pragma kcg enum_val 4 #end M_NVEBCL_Confidence_level_99_99 ,
	#pragma kcg enum_val 5 #end M_NVEBCL_Confidence_level_99_999 ,
	#pragma kcg enum_val 6 #end M_NVEBCL_Confidence_level_99_9999 ,
	#pragma kcg enum_val 7 #end M_NVEBCL_Confidence_level_99_99999 ,
	#pragma kcg enum_val 8 #end M_NVEBCL_Confidence_level_99_999999 ,
	#pragma kcg enum_val 9 #end M_NVEBCL_Confidence_level_99_9999999 
}; 
type M_NVKRINT = real	 /* MinVal = 0.0, MaxVal = 1.5 */  ; 
type M_NVKTINT = real	 /* MinVal = 0.0, MaxVal = 1.5 */  ; 
type M_NVKVINT = real	 /* MinVal = 0.0, MaxVal = 2.5 */  ; 
type M_PLATFORM = enum { 
	#pragma kcg enum_val 0 #end M_PLATFORM_200_mm ,
	#pragma kcg enum_val 1 #end M_PLATFORM_300380_mm ,
	#pragma kcg enum_val 2 #end M_PLATFORM_550_mm ,
	#pragma kcg enum_val 3 #end M_PLATFORM_580_mm ,
	#pragma kcg enum_val 4 #end M_PLATFORM_680_mm ,
	#pragma kcg enum_val 5 #end M_PLATFORM_685_mm ,
	#pragma kcg enum_val 6 #end M_PLATFORM_730_mm ,
	#pragma kcg enum_val 7 #end M_PLATFORM_760_mm ,
	#pragma kcg enum_val 8 #end M_PLATFORM_840_mm ,
	#pragma kcg enum_val 9 #end M_PLATFORM_900_mm ,
	#pragma kcg enum_val 10 #end M_PLATFORM_915_mm ,
	#pragma kcg enum_val 11 #end M_PLATFORM_920_mm ,
	#pragma kcg enum_val 12 #end M_PLATFORM_960_mm ,
	#pragma kcg enum_val 13 #end M_PLATFORM_1100_mm 
}; 
type M_POSITION = int	 /* MinVal = 0, MaxVal = 9999999 */	 -- 16777215 = No_more_geographical_position_calculation_after_this_reference_location 
  ; 
type M_TRACKCOND = enum { 
	#pragma kcg enum_val 0 #end M_TRACKCOND_Non_stopping_area_Initial_state_is_stopping_permitted ,
	#pragma kcg enum_val 1 #end M_TRACKCOND_Tunnel_stopping_area_Initial_state_is_no_tunnel_stopping_area ,
	#pragma kcg enum_val 2 #end M_TRACKCOND_Sound_horn_Initial_state_is_is_no_request_for_sound_horn ,
	#pragma kcg enum_val 3 #end M_TRACKCOND_Powerless_section_Lower_pantograph_Initial_state_is_not_powerless_section ,
	#pragma kcg enum_val 4 #end M_TRACKCOND_Radio_hole_stop_supervising_T_NVCONTACT_Initial_state_is_supervise_T_NVCONTACT ,
	#pragma kcg enum_val 5 #end M_TRACKCOND_Air_tightness_Initial_state_is_no_request_for_air_tightness ,
	#pragma kcg enum_val 6 #end M_TRACKCOND_Switch_off_regenerative_brake_Initial_state_is_regenerative_brake_on ,
	#pragma kcg enum_val 7 #end M_TRACKCOND_Switch_off_eddy_current_brake_for_service_brake_Initial_state_is_eddy_current_brake_for_service_brake_on ,
	#pragma kcg enum_val 8 #end M_TRACKCOND_Switch_off_magnetic_shoe_brake_Initial_state_is_magnetic_shoe_brake_on ,
	#pragma kcg enum_val 9 #end M_TRACKCOND_Powerless_section_switch_off_the_main_power_switch_Initial_state_is_not_powerless_section ,
	#pragma kcg enum_val 10 #end M_TRACKCOND_Switch_off_eddy_current_brake_for_emergency_brake_Initial_state_is_eddy_current_brake_for_emergency_brake_on 
}; 
type M_VOLTAGE = enum { 
	#pragma kcg enum_val 0 #end M_VOLTAGE_Line_not_fitted_with_any_traction_system ,
	#pragma kcg enum_val 1 #end M_VOLTAGE_AC_25_kV_50_Hz ,
	#pragma kcg enum_val 2 #end M_VOLTAGE_AC_15_kV_16_7_Hz ,
	#pragma kcg enum_val 3 #end M_VOLTAGE_DC_3_kV ,
	#pragma kcg enum_val 4 #end M_VOLTAGE_DC_1_5_kV ,
	#pragma kcg enum_val 5 #end M_VOLTAGE_DC_600_or_750_V 
}; 
type M_VERSION = enum { 
	#pragma kcg enum_val 0 #end M_VERSION_Previous_versions_according_to_e_g_EEIG_SRS_and_UIC_A200_SRS ,
	#pragma kcg enum_val 16 #end M_VERSION_Version_1_0_introduced_in_SRS_1_2_0_and_reused_in_SRSs_2_0_0_and_2_2_2_and_2_3_0 ,
	#pragma kcg enum_val 17 #end M_VERSION_Version_1_1_introduced_in_SRS_3_3_0 ,
	#pragma kcg enum_val 32 #end M_VERSION_Version_2_0_introduced_in_SRS_3_3_0 
}; 
type N_AXLE = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = Unknown 
  ; 
type N_ITER = int	 /* MinVal = 0, MaxVal = 31 */  ; 
type N_PIG = enum { 
	#pragma kcg enum_val 0 #end N_PIG_I_am_the_1st ,
	#pragma kcg enum_val 1 #end N_PIG_I_am_the_2nd ,
	#pragma kcg enum_val 2 #end N_PIG_I_am_the_3rd ,
	#pragma kcg enum_val 3 #end N_PIG_I_am_the_4th ,
	#pragma kcg enum_val 4 #end N_PIG_I_am_the_5th ,
	#pragma kcg enum_val 5 #end N_PIG_I_am_the_6th ,
	#pragma kcg enum_val 6 #end N_PIG_I_am_the_7th ,
	#pragma kcg enum_val 7 #end N_PIG_I_am_the_8th 
}; 
type N_TOTAL = enum { 
	#pragma kcg enum_val 0 #end N_TOTAL_1_balise_in_the_group ,
	#pragma kcg enum_val 1 #end N_TOTAL_2_balises_in_the_group ,
	#pragma kcg enum_val 2 #end N_TOTAL_3_balises_in_the_group ,
	#pragma kcg enum_val 3 #end N_TOTAL_4_balises_in_the_group ,
	#pragma kcg enum_val 4 #end N_TOTAL_5_balises_in_the_group ,
	#pragma kcg enum_val 5 #end N_TOTAL_6_balises_in_the_group ,
	#pragma kcg enum_val 6 #end N_TOTAL_7_balises_in_the_group ,
	#pragma kcg enum_val 7 #end N_TOTAL_8_balises_in_the_group 
}; 
type NC_CDDIFF = enum { 
	#pragma kcg enum_val 0 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_80_mm ,
	#pragma kcg enum_val 1 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_100_mm ,
	#pragma kcg enum_val 2 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_130_mm ,
	#pragma kcg enum_val 3 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_150_mm ,
	#pragma kcg enum_val 4 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_165_mm ,
	#pragma kcg enum_val 5 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_180_mm ,
	#pragma kcg enum_val 6 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_210_mm ,
	#pragma kcg enum_val 7 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_225_mm ,
	#pragma kcg enum_val 8 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_245_mm ,
	#pragma kcg enum_val 9 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_275_mm ,
	#pragma kcg enum_val 10 #end NC_CDDIFF_Specific_SSP_applicable_to_Cant_Deficiency_300_mm 
}; 
type NC_CDTRAIN = enum { 
	#pragma kcg enum_val 0 #end NC_CDTRAIN_Cant_Deficiency_80_mm ,
	#pragma kcg enum_val 1 #end NC_CDTRAIN_Cant_Deficiency_100_mm ,
	#pragma kcg enum_val 2 #end NC_CDTRAIN_Cant_Deficiency_130_mm ,
	#pragma kcg enum_val 3 #end NC_CDTRAIN_Cant_Deficiency_150_mm ,
	#pragma kcg enum_val 4 #end NC_CDTRAIN_Cant_Deficiency_165_mm ,
	#pragma kcg enum_val 5 #end NC_CDTRAIN_Cant_Deficiency_180_mm ,
	#pragma kcg enum_val 6 #end NC_CDTRAIN_Cant_Deficiency_210_mm ,
	#pragma kcg enum_val 7 #end NC_CDTRAIN_Cant_Deficiency_225_mm ,
	#pragma kcg enum_val 8 #end NC_CDTRAIN_Cant_Deficiency_245_mm ,
	#pragma kcg enum_val 9 #end NC_CDTRAIN_Cant_Deficiency_275_mm ,
	#pragma kcg enum_val 10 #end NC_CDTRAIN_Cant_Deficiency_300_mm 
}; 
type NC_DIFF = int	 /* MinVal = 0, MaxVal = 15 */	 -- 0 = Specific_SSP_applicable_to_Freight_train_braked_in_P_position 
	 -- 1 = Specific_SSP_applicable_to_Freight_train_braked_in_G_position 
	 -- 2 = Specific_SSP_applicable_to_Passenger_train 
  ; 
type NC_TRAIN = enum { 
	#pragma kcg enum_val 0 #end NC_TRAIN_Train_does_not_belong_to_any_of_the_Other_International_Train_Category ,
	#pragma kcg enum_val 1 #end NC_TRAIN_Freight_train_braked_in_P_position ,
	#pragma kcg enum_val 2 #end NC_TRAIN_Freight_train_braked_in_G_position ,
	#pragma kcg enum_val 4 #end NC_TRAIN_Passenger_train 
}; 
type NID_BG = int	 /* MinVal = 0, MaxVal = 16382 */	 -- 16383 = Identity_is_unknown_(only_to_be_used_for_Linking_information) 
  ; 
type NID_C = int	 /* MinVal = 0, MaxVal = 1023 */  ; 
type NID_CTRACTION = int	 /* MinVal = 0, MaxVal = 1023 */  ; 
type NID_EM = int  ; 
type NID_ENGINE = int  ; 
type NID_LOOP = int	 /* MinVal = 0, MaxVal = 16383 */  ; 
type NID_LRBG = int	 -- 16777215 = Unknown 
  ; 
type NID_LTRBG = int  ; 
type NID_LX = int	 /* MinVal = 0, MaxVal = 255 */	 -- 0-126 = Reserved_for_non_RBC_transmission_(balise_loop_or_radio_infill) 
	 -- 127-255 = Reserved_for_RBC_transmission 
  ; 
type NID_MESSAGE = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type NID_MN = int	 /* MinVal = 0, MaxVal = 999999 */	 -- A-E = Not_Used 
	 -- F = Use_value_F_for_digit_to_indicate_no_digit_(if_number_shorter_than_6_digits) 
  ; 
type NID_OPERATIONAL = int	 /* MinVal = 0, MaxVal = 99999999 */	 -- F = Use_value_F_for_digit_to_indicate_no_digit_(if_number_shorter_than_8_digits) 
  ; 
type NID_PACKET = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type NID_PRVLRBG = int	 -- 16777215 = unknown 
  ; 
type NID_RADIO = int	 /* MinVal = 0, MaxVal = 9999999999999999 */	 -- A-E = Not_Used 
	 -- F = Use_value_F_for_digit_to_indicate_no_digit_(if_number_shorter_than_16_digits) 
	 -- FFFF FFFF FFFF FFFF = Use_the_short_number_stored_onboard 
  ; 
type NID_RBC = int	 /* MinVal = 0, MaxVal = 16382 */	 -- 16383 = Contact_last_known_RBC 
  ; 
type NID_RIU = int	 /* MinVal = 0, MaxVal = 16383 */  ; 
type NID_NTC = int  ; 
type NID_TEXTMESSAGE = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type NID_TSR = int	 /* MinVal = 0, MaxVal = 255 */	 -- 0-126 = Reserved_for_non_RBC_transmission_(balise_loop_or_radio_infill) 
	 -- 127-254 = Reserved_for_RBC_transmission 
	 -- 255 = Nonrevocable_speed_restriction_(applicable_for_all_transmission_media) 
  ; 
type NID_VBCMK = int	 /* MinVal = 0, MaxVal = 63 */  ; 
type NID_XUSER = int	 /* MinVal = 0, MaxVal = 511 */  ; 
type Q_ASPECT = enum { 
	#pragma kcg enum_val 0 #end Q_ASPECT_Stop_if_in_SH_mode ,
	#pragma kcg enum_val 1 #end Q_ASPECT_Go_if_in_SH_mode 
}; 
type Q_CONFTEXTDISPLAY = enum { 
	#pragma kcg enum_val 0 #end Q_CONFTEXTDISPLAY_Driver_acknowledgement_always_ends_the_text_display_regardless_of_the_end_condition ,
	#pragma kcg enum_val 1 #end Q_CONFTEXTDISPLAY_Driver_acknowledgement_is_an_additional_condition_to_end_the_display 
}; 
type Q_DANGERPOINT = enum { 
	#pragma kcg enum_val 0 #end Q_DANGERPOINT_No_danger_point_information ,
	#pragma kcg enum_val 1 #end Q_DANGERPOINT_Danger_point_information_to_follow 
}; 
type Q_DIFF = enum { 
	#pragma kcg enum_val 0 #end Q_DIFF_Cant_Deficiency_specific_category ,
	#pragma kcg enum_val 1 #end Q_DIFF_Other_specific_category_replaces_the_Cant_Deficiency_SSP ,
	#pragma kcg enum_val 2 #end Q_DIFF_Other_specific_category_does_not_replace_the_Cant_Deficiency_SSP 
}; 
type Q_DIR = enum { 
	#pragma kcg enum_val 0 #end Q_DIR_Reverse ,
	#pragma kcg enum_val 1 #end Q_DIR_Nominal ,
	#pragma kcg enum_val 2 #end Q_DIR_Both_directions 
}; 
type Q_DIRLRBG = enum { 
	#pragma kcg enum_val 0 #end Q_DIRLRBG_Reverse ,
	#pragma kcg enum_val 1 #end Q_DIRLRBG_Nominal ,
	#pragma kcg enum_val 2 #end Q_DIRLRBG_Unknown 
}; 
type Q_DIRTRAIN = enum { 
	#pragma kcg enum_val 0 #end Q_DIRTRAIN_Reverse ,
	#pragma kcg enum_val 1 #end Q_DIRTRAIN_Nominal ,
	#pragma kcg enum_val 2 #end Q_DIRTRAIN_Unknown 
}; 
type Q_DLRBG = enum { 
	#pragma kcg enum_val 0 #end Q_DLRBG_Reverse ,
	#pragma kcg enum_val 1 #end Q_DLRBG_Nominal ,
	#pragma kcg enum_val 2 #end Q_DLRBG_Unknown 
}; 
type Q_EMERGENCYSTOP = enum { 
	#pragma kcg enum_val 0 #end Q_EMERGENCYSTOP_Conditional_Emergency_Stop_accepted_with_update_of_EOA ,
	#pragma kcg enum_val 1 #end Q_EMERGENCYSTOP_Conditional_Emergency_Stop_accepted_with_no_update_of_EOA ,
	#pragma kcg enum_val 2 #end Q_EMERGENCYSTOP_Unconditional_Emergency_Stop_accepted ,
	#pragma kcg enum_val 3 #end Q_EMERGENCYSTOP_Emergency_stop 
}; 
type Q_ENDTIMER = enum { 
	#pragma kcg enum_val 0 #end Q_ENDTIMER_No_End_section_timer_information ,
	#pragma kcg enum_val 1 #end Q_ENDTIMER_End_section_timer_information_to_follow 
}; 
type Q_FRONT = enum { 
	#pragma kcg enum_val 0 #end Q_FRONT_Train_length_delay_on_validity_end_point_of_profile_element ,
	#pragma kcg enum_val 1 #end Q_FRONT_No_train_length_delay_on_validity_end_point_of_profile_element 
}; 
type Q_GDIR = enum { 
	#pragma kcg enum_val 0 #end Q_GDIR_downhill ,
	#pragma kcg enum_val 1 #end Q_GDIR_uphill 
}; 
type Q_INFILL = enum { 
	#pragma kcg enum_val 0 #end Q_INFILL_Enter ,
	#pragma kcg enum_val 1 #end Q_INFILL_Exit 
}; 
type Q_LENGTH = enum { 
	#pragma kcg enum_val 0 #end Q_LENGTH_No_train_integrity_information_available ,
	#pragma kcg enum_val 1 #end Q_LENGTH_Train_integrity_confirmed_by_integrity_monitoring_device ,
	#pragma kcg enum_val 2 #end Q_LENGTH_Train_integrity_confirmed_by_driver ,
	#pragma kcg enum_val 3 #end Q_LENGTH_Train_integrity_lost 
}; 
type Q_LGTLOC = enum { 
	#pragma kcg enum_val 0 #end Q_LGTLOC_Min_safe_rear_end ,
	#pragma kcg enum_val 1 #end Q_LGTLOC_Max_safe_front_end 
}; 
type Q_LINK = enum { 
	#pragma kcg enum_val 0 #end Q_LINK_Unlinked ,
	#pragma kcg enum_val 1 #end Q_LINK_Linked 
}; 
type Q_LOCACC = int	 /* MinVal = 0, MaxVal = 63 */  ; 
type Q_LINKORIENTATION = enum { 
	#pragma kcg enum_val 0 #end Q_LINKORIENTATION_The_balise_group_is_seen_by_the_train_in_reverse_direction ,
	#pragma kcg enum_val 1 #end Q_LINKORIENTATION_The_balise_group_is_seen_by_the_train_in_nominal_direction 
}; 
type Q_LINKREACTION = enum { 
	#pragma kcg enum_val 0 #end Q_LINKREACTION_Train_trip ,
	#pragma kcg enum_val 1 #end Q_LINKREACTION_Apply_service_brake ,
	#pragma kcg enum_val 2 #end Q_LINKREACTION_No_Reaction 
}; 
type Q_LOOPDIR = enum { 
	#pragma kcg enum_val 0 #end Q_LOOPDIR_Opposite ,
	#pragma kcg enum_val 1 #end Q_LOOPDIR_Same 
}; 
type Q_LXSTATUS = enum { 
	#pragma kcg enum_val 0 #end Q_LXSTATUS_LX_is_protected ,
	#pragma kcg enum_val 1 #end Q_LXSTATUS_LX_is_not_protected 
}; 
type Q_MAMODE = enum { 
	#pragma kcg enum_val 0 #end Q_MAMODE_as_the_EOA ,
	#pragma kcg enum_val 1 #end Q_MAMODE_as_both_the_EOA_and_SvL 
}; 
type Q_MARQSTREASON = enum { 
	#pragma kcg enum_val 1 #end Q_MARQSTREASON_Start_selected_by_driver ,
	#pragma kcg enum_val 2 #end Q_MARQSTREASON_Time_before_reaching_preindication_location_for_the_EOA_or_LOA_reached ,
	#pragma kcg enum_val 4 #end Q_MARQSTREASON_Time_before_a_section_timer_or_LOA_speed_timer_expires_reached ,
	#pragma kcg enum_val 8 #end Q_MARQSTREASON_Track_description_deleted ,
	#pragma kcg enum_val 16 #end Q_MARQSTREASON_TAF_up_to_level_2_or_3_transition_location 
}; 
type Q_MEDIA = enum { 
	#pragma kcg enum_val 0 #end Q_MEDIA_Balise ,
	#pragma kcg enum_val 1 #end Q_MEDIA_Loop 
}; 
type Q_MPOSITION = enum { 
	#pragma kcg enum_val 0 #end Q_MPOSITION_Opposite ,
	#pragma kcg enum_val 1 #end Q_MPOSITION_Same 
}; 
type Q_NEWCOUNTRY = enum { 
	#pragma kcg enum_val 0 #end Q_NEWCOUNTRY_Same_country__or__railway_administration_no_NID_C_follows ,
	#pragma kcg enum_val 1 #end Q_NEWCOUNTRY_Not_the_same_country__or__railway_administration_NID_C_follows 
}; 
type Q_NVDRIVER_ADHES = enum { 
	#pragma kcg enum_val 0 #end Q_NVDRIVER_ADHES_Not_allowed ,
	#pragma kcg enum_val 1 #end Q_NVDRIVER_ADHES_Allowed 
}; 
type Q_NVEMRRLS = enum { 
	#pragma kcg enum_val 0 #end Q_NVEMRRLS_Revoke_emergency_brake_command_at_standstill ,
	#pragma kcg enum_val 1 #end Q_NVEMRRLS_Revoke_emergency_brake_command_when_permitted_speed_supervision_limit_is_no_longer_exceeded 
}; 
type Q_NVGUIPERM = enum { 
	#pragma kcg enum_val 0 #end Q_NVGUIPERM_No ,
	#pragma kcg enum_val 1 #end Q_NVGUIPERM_Yes 
}; 
type Q_NVINHSMICPERM = enum { 
	#pragma kcg enum_val 0 #end Q_NVINHSMICPERM_No ,
	#pragma kcg enum_val 1 #end Q_NVINHSMICPERM_Yes 
}; 
type Q_NVKINT = enum { 
	#pragma kcg enum_val 0 #end Q_NVKINT_No_integrated_correction_factors_follow ,
	#pragma kcg enum_val 1 #end Q_NVKINT_Integrated_correction_factors_follow 
}; 
type Q_NVKVINTSET = enum { 
	#pragma kcg enum_val 0 #end Q_NVKVINTSET_Freight_trains ,
	#pragma kcg enum_val 1 #end Q_NVKVINTSET_Conventional_passenger_trains 
}; 
type Q_NVLOCACC = int	 /* MinVal = 0, MaxVal = 63 */  ; 
type Q_NVSBFBPERM = enum { 
	#pragma kcg enum_val 0 #end Q_NVSBFBPERM_No ,
	#pragma kcg enum_val 1 #end Q_NVSBFBPERM_Yes 
}; 
type Q_NVSBTSMPERM = enum { 
	#pragma kcg enum_val 0 #end Q_NVSBTSMPERM_No ,
	#pragma kcg enum_val 1 #end Q_NVSBTSMPERM_Yes 
}; 
type Q_ORIENTATION = enum { 
	#pragma kcg enum_val 0 #end Q_ORIENTATION_The_balise_group_has_been_passed_by_the_train_in_reverse_direction ,
	#pragma kcg enum_val 1 #end Q_ORIENTATION_The_balise_group_has_been_passed_by_the_train_in_nominal_direction 
}; 
type Q_OVERLAP = enum { 
	#pragma kcg enum_val 0 #end Q_OVERLAP_No_overlap_information ,
	#pragma kcg enum_val 1 #end Q_OVERLAP_Overlap_information_to_follow 
}; 
type Q_PBDSR = enum { 
	#pragma kcg enum_val 0 #end Q_PBDSR_EB_intervention_requested ,
	#pragma kcg enum_val 1 #end Q_PBDSR_SB_intervention_requested 
}; 
type Q_PLATFORM = enum { 
	#pragma kcg enum_val 0 #end Q_PLATFORM_Platform_on_left_side ,
	#pragma kcg enum_val 1 #end Q_PLATFORM_Platform_on_right_side ,
	#pragma kcg enum_val 2 #end Q_PLATFORM_Platform_on_both_sides 
}; 
type Q_RBC = enum { 
	#pragma kcg enum_val 0 #end Q_RBC_Terminate_communication_session ,
	#pragma kcg enum_val 1 #end Q_RBC_Establish_communication_session 
}; 
type Q_RIU = enum { 
	#pragma kcg enum_val 0 #end Q_RIU_Terminate_communication_session ,
	#pragma kcg enum_val 1 #end Q_RIU_Establish_communication_session 
}; 
type Q_SCALE = enum { 
	#pragma kcg enum_val 0 #end Q_SCALE_10_cm_scale ,
	#pragma kcg enum_val 1 #end Q_SCALE_1_m_scale ,
	#pragma kcg enum_val 2 #end Q_SCALE_10_m_scale 
}; 
type Q_SECTIONTIMER = enum { 
	#pragma kcg enum_val 0 #end Q_SECTIONTIMER_No_Section_Timer_information ,
	#pragma kcg enum_val 1 #end Q_SECTIONTIMER_Section_Timer_information_to_follow 
}; 
type Q_SLEEPSESSION = enum { 
	#pragma kcg enum_val 0 #end Q_SLEEPSESSION_Ignore_session_establishment_order ,
	#pragma kcg enum_val 1 #end Q_SLEEPSESSION_Execute_session_establishment_order 
}; 
type Q_SRSTOP = enum { 
	#pragma kcg enum_val 0 #end Q_SRSTOP_Stop_if_in_SR_mode ,
	#pragma kcg enum_val 1 #end Q_SRSTOP_Go_if_in_SR_mode 
}; 
type Q_SSCODE = int	 -- 15 = Code_reserved_for_test_purposes 
  ; 
type Q_STATUS = enum { 
	#pragma kcg enum_val 0 #end Q_STATUS_Invalid ,
	#pragma kcg enum_val 1 #end Q_STATUS_Valid ,
	#pragma kcg enum_val 2 #end Q_STATUS_Unknown 
}; 
type Q_STOPLX = enum { 
	#pragma kcg enum_val 0 #end Q_STOPLX_No_stop_required ,
	#pragma kcg enum_val 1 #end Q_STOPLX_Stop_required 
}; 
type Q_SUITABILITY = enum { 
	#pragma kcg enum_val 0 #end Q_SUITABILITY_Loading_gauge ,
	#pragma kcg enum_val 1 #end Q_SUITABILITY_Max_axle_load ,
	#pragma kcg enum_val 2 #end Q_SUITABILITY_Traction_system 
}; 
type Q_TEXT = enum { 
	#pragma kcg enum_val 0 #end Q_TEXT_Level_crossing_not_protected ,
	#pragma kcg enum_val 1 #end Q_TEXT_Acknowledgement 
}; 
type Q_TEXTCLASS = enum { 
	#pragma kcg enum_val 0 #end Q_TEXTCLASS_Auxiliary_Information ,
	#pragma kcg enum_val 1 #end Q_TEXTCLASS_Important_Information 
}; 
type Q_TEXTCONFIRM = enum { 
	#pragma kcg enum_val 0 #end Q_TEXTCONFIRM_No_confirmation_required ,
	#pragma kcg enum_val 1 #end Q_TEXTCONFIRM_Confirmation_required ,
	#pragma kcg enum_val 2 #end Q_TEXTCONFIRM_Confirmation_required_command_application_of_the_service_brake_when_display_end_condition_is_fulfilled_unless_the_text_has_already_been_acknowledged_by_the_driver ,
	#pragma kcg enum_val 3 #end Q_TEXTCONFIRM_Confirmation_required_command_application_of_the_emergency_brake_when_display_end_condition_is_fulfilled_unless_the_text_has_already_been_acknowledged_by_the_driver 
}; 
type Q_TEXTDISPLAY = enum { 
	#pragma kcg enum_val 0 #end Q_TEXTDISPLAY_No_display_as_soon_as__or__until_one_of_the_events_is_fulfilled ,
	#pragma kcg enum_val 1 #end Q_TEXTDISPLAY_Yes_display_as_soon_as__or__until_all_events_are_fulfilled 
}; 
type Q_TEXTREPORT = enum { 
	#pragma kcg enum_val 0 #end Q_TEXTREPORT_No_driver_acknowledgement_report_required ,
	#pragma kcg enum_val 1 #end Q_TEXTREPORT_Driver_acknowledgement_report_required 
}; 
type Q_TRACKINIT = enum { 
	#pragma kcg enum_val 0 #end Q_TRACKINIT_No_initial_states_to_be_resumed_profile_to_follow ,
	#pragma kcg enum_val 1 #end Q_TRACKINIT_Empty_profile_initial_states_to_be_resumed 
}; 
type Q_UPDOWN = enum { 
	#pragma kcg enum_val 0 #end Q_UPDOWN_Down_link_telegram ,
	#pragma kcg enum_val 1 #end Q_UPDOWN_Up_link_telegram 
}; 
type Q_VBCO = enum { 
	#pragma kcg enum_val 0 #end Q_VBCO_Remove_the_Virtual_Balise_Cover ,
	#pragma kcg enum_val 1 #end Q_VBCO_Set_the_Virtual_Balise_Cover 
}; 
type T_CYCLOC = int	 /* MinVal = 0, MaxVal = 254 */	 -- 255 = infinite 
  ; 
type T_CYCRQST = int	 /* MinVal = 0, MaxVal = 254 */	 -- 255 = No_repetition 
  ; 
type T_ENDTIMER = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = infinite 
  ; 
type T_LOA = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = infinite 
  ; 
type T_MAR = int	 /* MinVal = 0, MaxVal = 254 */	 -- 255 = _No_MA_request_triggering_with_regards_to_this_function 
  ; 
type T_NVCONTACT = int	 /* MinVal = 0, MaxVal = 254 */	 -- 1111 1111 = T_NVCONTACT_infinite 
  ; 
type T_NVOVTRP = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type T_OL = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = infinite 
  ; 
type T_SECTIONTIMER = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = infinite 
  ; 
type T_TEXTDISPLAY = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = Display_of_text_not_limited_by_time 
  ; 
type T_TIMEOUTRQST = int	 /* MinVal = 0, MaxVal = 1022 */	 -- 1023 = _No_MA_request_triggering_with_regards_to_this_function 
  ; 
type T_TRAIN = int	 /* MinVal = 0.0, MaxVal = 42949672.94 */	 -- 4294967295 = Unknown /* Changed by Bernd Hekele (DB) */
  ; 
type T_VBC = int	 /* MinVal = 0, MaxVal = 255 */  ; 
type V_AXLELOAD = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_DIFF = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_LOA = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_LX = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_MAIN = int	 /* MinVal = 0, MaxVal = 600 */	 -- 0 = Means_trip_order 
  ; 
type V_MAMODE = int	 /* MinVal = 0, MaxVal = 600 */	 -- 127 = Use_the_national_speed_value_of_the_required_mode 
  ; 
type V_MAXTRAIN = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVALLOWOVTRP = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVKVINT = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVLIMSUPERV = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVONSIGHT = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVSUPOVTRP = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVREL = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVSHUNT = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVSTFF = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_NVUNFIT = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_RELEASEDP = int	 /* MinVal = 0, MaxVal = 600 */	 -- 126 = Use_onboard_calculated_release_speed 
	 -- 127 = Use_national_value 
  ; 
type V_RELEASEOL = int	 /* MinVal = 0, MaxVal = 600 */	 -- 126 = Use_onboard_calculated_release_speed 
	 -- 127 = Use_national_value 
  ; 
type V_REVERSE = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_STATIC = int	 /* MinVal = 0, MaxVal = 600 */	 -- 127 = Non_numerical_value_telling_that_the_static_speed_profile_description_ends_at_D_STATIC(n) 
  ; 
type V_TRAIN = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type V_TSR = int	 /* MinVal = 0, MaxVal = 600 */  ; 
type X_TEXT = int  ; 
package TrackToTrain

type
Virtual_Balise_Cover_marker = { 
	NID_PACKET : int 	 /* Packet =   0 */ ,
	NID_VBCMK : int 
};


type
System_Version_order = { 
	NID_PACKET : int 	 /* Packet =   2 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	M_VERSION : int 
};


type Var30 = { 
	NID_C : int
};
type AVar30 = Var30 ^33 ;
type SVar30 = { 
	 N_ITER : int,
	 Array : AVar30
};

type Var31 = { 
	V_NVKVINT : int,
	M_NVKVINT : real
};
type AVar31 = Var31 ^33 ;
type SVar31 = { 
	 N_ITER : int,
	 Array : AVar31
};

type Var32 = { 
	Q_NVKVINTSET : int,
	A_NVP12 : real,
	A_NVP23 : real,
	V_NVKVINT : int,
	M_NVKVINT : real,
	Struct51 : SVar33
};
type AVar32 = Var32 ^33 ;
type SVar32 = { 
	 N_ITER : int,
	 Array : AVar32
};

type Var33 = { 
	V_NVKVINT : int,
	M_NVKVINT : real
};
type AVar33 = Var33 ^33 ;
type SVar33 = { 
	 N_ITER : int,
	 Array : AVar33
};

type Var34 = { 
	L_NVKRINT : int,
	M_NVKRINT : real
};
type AVar34 = Var34 ^33 ;
type SVar34 = { 
	 N_ITER : int,
	 Array : AVar34
};

type
National_Values = { 
	NID_PACKET : int 	 /* Packet =   3 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_VALIDNV : int ,
	NID_C : int ,
	Struct0 : SVar30,
	V_NVSHUNT : int ,
	V_NVSTFF : int ,
	V_NVONSIGHT : int ,
	V_NVLIMSUPERV : int ,
	V_NVUNFIT : int ,
	V_NVREL : int ,
	D_NVROLL : int ,
	Q_NVSBTSMPERM : int ,
	Q_NVEMRRLS : int ,
	Q_NVGUIPERM : int ,
	Q_NVSBFBPERM : int ,
	Q_NVINHSMICPERM : int ,
	V_NVALLOWOVTRP : int ,
	V_NVSUPOVTRP : int ,
	D_NVOVTRP : int ,
	T_NVOVTRP : int ,
	D_NVPOTRP : int ,
	M_NVCONTACT : int ,
	T_NVCONTACT : int ,
	M_NVDERUN : int ,
	D_NVSTFF : int ,
	Q_NVDRIVER_ADHES : int ,
	A_NVMAXREDADH1 : real ,
	A_NVMAXREDADH2 : real ,
	A_NVMAXREDADH3 : real ,
	Q_NVLOCACC : int ,
	M_NVAVADH : real ,
	M_NVEBCL : int ,
	Q_NVKINT : int ,
	Q_NVKVINTSET : int ,
	A_NVP12 : real ,
	A_NVP23 : real ,
	V_NVKVINT : int ,
	M_NVKVINT : real ,
	Struct1 : SVar31,
	Struct2 : SVar32,
	L_NVKRINT : int ,
	M_NVKRINT : real ,
	Struct4 : SVar34,
	M_NVKTINT : real 
};


type Var50 = { 
	D_LINK : int,
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int,
	Q_LINKORIENTATION : int,
	Q_LINKREACTION : int,
	Q_LOCACC : int
};
type AVar50 = Var50 ^33 ;
type SVar50 = { 
	 N_ITER : int,
	 Array : AVar50
};

type
Linking = { 
	NID_PACKET : int 	 /* Packet =   5 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_LINK : int ,
	Q_NEWCOUNTRY : int ,
	NID_C : int ,
	NID_BG : int ,
	Q_LINKORIENTATION : int ,
	Q_LINKREACTION : int ,
	Q_LOCACC : int ,
	Struct5 : SVar50
};


type
Virtual_Balise_Cover_order = { 
	NID_PACKET : int 	 /* Packet =   6 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_VBCO : int ,
	NID_VBCMK : int ,
	NID_C : int ,
	T_VBC : int 
};


type Var120 = { 
	L_SECTION : int,
	Q_SECTIONTIMER : int,
	T_SECTIONTIMER : int,
	D_SECTIONTIMERSTOPLOC : int
};
type AVar120 = Var120 ^33 ;
type SVar120 = { 
	 N_ITER : int,
	 Array : AVar120
};

type
Level_1_Movement_Authority = { 
	NID_PACKET : int 	 /* Packet =  12 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	V_MAIN : int ,
	V_LOA : int ,
	T_LOA : int ,
	Struct6 : SVar120,
	L_ENDSECTION : int ,
	Q_SECTIONTIMER : int ,
	T_SECTIONTIMER : int ,
	D_SECTIONTIMERSTOPLOC : int ,
	Q_ENDTIMER : int ,
	T_ENDTIMER : int ,
	D_ENDTIMERSTARTLOC : int ,
	Q_DANGERPOINT : int ,
	D_DP : int ,
	V_RELEASEDP : int ,
	Q_OVERLAP : int ,
	D_STARTOL : int ,
	T_OL : int ,
	D_OL : int ,
	V_RELEASEOL : int 
};


type Var137 = { 
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int
};



type Var130 = { 
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int,
	D_SR : int
};
type AVar130 = Var130 ^33 ;
type SVar130 = { 
	 N_ITER : int,
	 Array : AVar130
};

type
Staff_Responsible_distance_Information_from_loop = { 
	NID_PACKET : int 	 /* Packet =  13 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Struct9 : Var137,
	Struct12 : Var137,
	D_SR : int ,
	Struct13 : SVar130
};


type Var150 = { 
	L_SECTION : int,
	Q_SECTIONTIMER : int,
	T_SECTIONTIMER : int,
	D_SECTIONTIMERSTOPLOC : int
};
type AVar150 = Var150 ^33 ;
type SVar150 = { 
	 N_ITER : int,
	 Array : AVar150
};

type
Level_23_Movement_Authority = { 
	NID_PACKET : int 	 /* Packet =  15 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	V_LOA : int ,
	T_LOA : int ,
	Struct14 : SVar150,
	L_ENDSECTION : int ,
	Q_SECTIONTIMER : int ,
	T_SECTIONTIMER : int ,
	D_SECTIONTIMERSTOPLOC : int ,
	Q_ENDTIMER : int ,
	T_ENDTIMER : int ,
	D_ENDTIMERSTARTLOC : int ,
	Q_DANGERPOINT : int ,
	D_DP : int ,
	V_RELEASEDP : int ,
	Q_OVERLAP : int ,
	D_STARTOL : int ,
	T_OL : int ,
	D_OL : int ,
	V_RELEASEOL : int 
};


type
Repositioning_Information = { 
	NID_PACKET : int 	 /* Packet =  16 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	L_SECTION : int 
};


type Var210 = { 
	D_GRADIENT : int,
	Q_GDIR : int,
	G_A : int
};
type AVar210 = Var210 ^33 ;
type SVar210 = { 
	 N_ITER : int,
	 Array : AVar210
};

type
Gradient_Profile = { 
	NID_PACKET : int 	 /* Packet =  21 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_GRADIENT : int ,
	Q_GDIR : int ,
	G_A : int ,
	Struct15 : SVar210
};


type Var270 = { 
	Q_DIFF : int,
	NC_CDDIFF : int,
	NC_DIFF : int,
	V_DIFF : int
};
type AVar270 = Var270 ^33 ;
type SVar270 = { 
	 N_ITER : int,
	 Array : AVar270
};

type Var271 = { 
	D_STATIC : int,
	V_STATIC : int,
	Q_FRONT : int,
	Struct62 : SVar272
};
type AVar271 = Var271 ^33 ;
type SVar271 = { 
	 N_ITER : int,
	 Array : AVar271
};

type Var272 = { 
	Q_DIFF : int,
	NC_CDDIFF : int,
	NC_DIFF : int,
	V_DIFF : int
};
type AVar272 = Var272 ^33 ;
type SVar272 = { 
	 N_ITER : int,
	 Array : AVar272
};

type
International_Static_Speed_Profile = { 
	NID_PACKET : int 	 /* Packet =  27 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_STATIC : int ,
	V_STATIC : int ,
	Q_FRONT : int ,
	Struct16 : SVar270,
	Struct17 : SVar271
};


type
Track_Condition_Change_of_traction_system = { 
	NID_PACKET : int 	 /* Packet =  39 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_TRACTION : int ,
	M_VOLTAGE : int ,
	NID_CTRACTION : int 
};


type
Track_Condition_Change_of_allowed_current_consumption = { 
	NID_PACKET : int 	 /* Packet =  40 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_CURRENT : int ,
	M_CURRENT : int 
};


type Var410 = { 
	M_LEVELTR : int,
	NID_NTC : int,
	L_ACKLEVELTR : int
};
type AVar410 = Var410 ^33 ;
type SVar410 = { 
	 N_ITER : int,
	 Array : AVar410
};

type
Level_Transition_Order = { 
	NID_PACKET : int 	 /* Packet =  41 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_LEVELTR : int ,
	M_LEVELTR : int ,
	NID_NTC : int ,
	L_ACKLEVELTR : int ,
	Struct19 : SVar410
};


type
Session_Management = { 
	NID_PACKET : int 	 /* Packet =  42 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_RBC : int ,
	NID_C : int ,
	NID_RBC : int ,
	NID_RADIO : int ,
	Q_SLEEPSESSION : int 
};


type
Data_used_by_applications_outside_the_ERTMSETCS_system = { 
	NID_PACKET : int 	 /* Packet =  44 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	NID_XUSER : int ,
	NID_NTC : int ,
	Other_data_depending_on__NID_XUSER : int  
};


type
Radio_Network_registration = { 
	NID_PACKET : int 	 /* Packet =  45 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	NID_MN : int 
};


type Var460 = { 
	M_LEVELTR : int,
	NID_NTC : int
};
type AVar460 = Var460 ^33 ;
type SVar460 = { 
	 N_ITER : int,
	 Array : AVar460
};

type
Conditional_Level_Transition_Order = { 
	NID_PACKET : int 	 /* Packet =  46 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	M_LEVELTR : int ,
	NID_NTC : int ,
	Struct20 : SVar460
};


type Var490 = { 
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int
};
type AVar490 = Var490 ^33 ;
type SVar490 = { 
	 N_ITER : int,
	 Array : AVar490
};

type
List_of_balises_for_SH_Area = { 
	NID_PACKET : int 	 /* Packet =  49 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Struct21 : SVar490
};


type Var510 = { 
	M_AXLELOADCAT : int,
	V_AXLELOAD : int
};
type AVar510 = Var510 ^33 ;
type SVar510 = { 
	 N_ITER : int,
	 Array : AVar510
};

type Var511 = { 
	D_AXLELOAD : int,
	L_AXLELOAD : int,
	Q_FRONT : int,
	Struct68 : SVar512
};
type AVar511 = Var511 ^33 ;
type SVar511 = { 
	 N_ITER : int,
	 Array : AVar511
};

type Var512 = { 
	M_AXLELOADCAT : int,
	V_AXLELOAD : int
};
type AVar512 = Var512 ^33 ;
type SVar512 = { 
	 N_ITER : int,
	 Array : AVar512
};

type
Axle_Load_Speed_Profile = { 
	NID_PACKET : int 	 /* Packet =  51 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TRACKINIT : int ,
	D_TRACKINIT : int ,
	D_AXLELOAD : int ,
	L_AXLELOAD : int ,
	Q_FRONT : int ,
	Struct22 : SVar510,
	Struct23 : SVar511
};


type Var520 = { 
	D_PBD : int,
	Q_GDIR : int,
	G_PBDSR : int,
	Q_PBDSR : int,
	D_PBDSR : int,
	L_PBDSR : int
};
type AVar520 = Var520 ^33 ;
type SVar520 = { 
	 N_ITER : int,
	 Array : AVar520
};

type
Permitted_Braking_Distance_Information = { 
	NID_PACKET : int 	 /* Packet =  52 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TRACKINIT : int ,
	D_TRACKINIT : int ,
	D_PBD : int ,
	Q_GDIR : int ,
	G_PBDSR : int ,
	Q_PBDSR : int ,
	D_PBDSR : int ,
	L_PBDSR : int ,
	Struct25 : SVar520
};


type
Movement_Authority_Request_Parameters = { 
	NID_PACKET : int 	 /* Packet =  57 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	T_MAR : int ,
	T_TIMEOUTRQST : int ,
	T_CYCRQST : int 
};


type Var580 = { 
	D_LOC : int,
	q_lgtloc : Q_LGTLOC
};
type AVar580 = Var580 ^33 ;
type SVar580 = { 
	 N_ITER : int,
	 Array : AVar580
};

type
Position_Report_Parameters = { 
	NID_PACKET : int 	 /* Packet =  58 */ ,
	q_dir : Q_DIR ,
	L_PACKET : int ,
	q_scale : Q_SCALE ,
	T_CYCLOC : int ,
	D_CYCLOC : int ,
	m_loc : M_LOC ,
	Struct26 : SVar580
};


type Var630 = { 
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int
};
type AVar630 = Var630 ^33 ;
type SVar630 = { 
	 N_ITER : int,
	 Array : AVar630
};

type
List_of_Balises_in_SR_Authority = { 
	NID_PACKET : int 	 /* Packet =  63 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Struct27 : SVar630
};


type
Inhibition_of_revocable_TSRs_from_balises_in_L23 = { 
	NID_PACKET : int 	 /* Packet =  64 */ ,
	Q_DIR : int ,
	L_PACKET : int 
};


type
Temporary_Speed_Restriction = { 
	NID_PACKET : int 	 /* Packet =  65 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	NID_TSR : int ,
	D_TSR : int ,
	L_TSR : int ,
	Q_FRONT : int ,
	V_TSR : int 
};


type
Temporary_Speed_Restriction_Revocation = { 
	NID_PACKET : int 	 /* Packet =  66 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	NID_TSR : int 
};


type Var670 = { 
	D_TRACKCOND : int,
	L_TRACKCOND : int
};
type AVar670 = Var670 ^33 ;
type SVar670 = { 
	 N_ITER : int,
	 Array : AVar670
};

type
Track_Condition_Big_Metal_Masses = { 
	NID_PACKET : int 	 /* Packet =  67 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_TRACKCOND : int ,
	L_TRACKCOND : int ,
	Struct28 : SVar670
};


type Var680 = { 
	D_TRACKCOND : int,
	L_TRACKCOND : int,
	M_TRACKCOND : int
};
type AVar680 = Var680 ^33 ;
type SVar680 = { 
	 N_ITER : int,
	 Array : AVar680
};

type
Track_Condition = { 
	NID_PACKET : int 	 /* Packet =  68 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TRACKINIT : int ,
	D_TRACKINIT : int ,
	D_TRACKCOND : int ,
	L_TRACKCOND : int ,
	M_TRACKCOND : int ,
	Struct29 : SVar680
};


type Var690 = { 
	D_TRACKCOND : int,
	L_TRACKCOND : int,
	M_PLATFORM : int,
	Q_PLATFORM : int
};
type AVar690 = Var690 ^33 ;
type SVar690 = { 
	 N_ITER : int,
	 Array : AVar690
};

type
Track_Condition_Station_Platforms = { 
	NID_PACKET : int 	 /* Packet =  69 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TRACKINIT : int ,
	D_TRACKINIT : int ,
	D_TRACKCOND : int ,
	L_TRACKCOND : int ,
	M_PLATFORM : int ,
	Q_PLATFORM : int ,
	Struct30 : SVar690
};


type Var700 = { 
	D_SUITABILITY : int,
	Q_SUITABILITY : int,
	M_LINEGAUGE : int,
	M_AXLELOADCAT : int,
	M_VOLTAGE : int,
	NID_CTRACTION : int
};
type AVar700 = Var700 ^33 ;
type SVar700 = { 
	 N_ITER : int,
	 Array : AVar700
};

type
Route_Suitability_Data = { 
	NID_PACKET : int 	 /* Packet =  70 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TRACKINIT : int ,
	D_TRACKINIT : int ,
	D_SUITABILITY : int ,
	Q_SUITABILITY : int ,
	M_LINEGAUGE : int ,
	M_AXLELOADCAT : int ,
	M_VOLTAGE : int ,
	NID_CTRACTION : int ,
	Struct31 : SVar700
};


type
Adhesion_factor = { 
	NID_PACKET : int 	 /* Packet =  71 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_ADHESION : int ,
	L_ADHESION : int ,
	M_ADHESION : int 
};


type Var727 = { 
	M_MODETEXTDISPLAY : int,
	M_LEVELTEXTDISPLAY : int,
	NID_NTC : int
};



type
Packet_for_sending_plain_text_messages = { 
	NID_PACKET : int 	 /* Packet =  72 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TEXTCLASS : int ,
	Q_TEXTDISPLAY : int ,
	D_TEXTDISPLAY : int ,
	Struct34 : Var727,
	L_TEXTDISPLAY : int ,
	T_TEXTDISPLAY : int ,
	Struct37 : Var727,
	Q_TEXTCONFIRM : int ,
	Q_CONFTEXTDISPLAY : int ,
	Q_TEXTREPORT : int ,
	NID_TEXTMESSAGE : int ,
	NID_C : int ,
	NID_RBC : int ,
	L_TEXT : int ,
	X_TEXT : int 
};


type Var767 = { 
	M_MODETEXTDISPLAY : int,
	M_LEVELTEXTDISPLAY : int,
	NID_NTC : int
};



type
Packet_for_sending_fixed_text_messages = { 
	NID_PACKET : int 	 /* Packet =  76 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_TEXTCLASS : int ,
	Q_TEXTDISPLAY : int ,
	D_TEXTDISPLAY : int ,
	Struct40 : Var767,
	L_TEXTDISPLAY : int ,
	T_TEXTDISPLAY : int ,
	Struct43 : Var767,
	Q_TEXTCONFIRM : int ,
	Q_CONFTEXTDISPLAY : int ,
	Q_TEXTREPORT : int ,
	NID_TEXTMESSAGE : int ,
	NID_C : int ,
	NID_RBC : int ,
	Q_TEXT : int 
};


type Var790 = { 
	Q_NEWCOUNTRY : int,
	NID_C : int,
	NID_BG : int,
	D_POSOFF : int,
	Q_MPOSITION : int,
	M_POSITION : int
};
type AVar790 = Var790 ^33 ;
type SVar790 = { 
	 N_ITER : int,
	 Array : AVar790
};

type
Geographical_Position_Information = { 
	NID_PACKET : int 	 /* Packet =  79 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_NEWCOUNTRY : int ,
	NID_C : int ,
	NID_BG : int ,
	D_POSOFF : int ,
	Q_MPOSITION : int ,
	M_POSITION : int ,
	Struct44 : SVar790
};


type Var800 = { 
	D_MAMODE : int,
	M_MAMODE : int,
	V_MAMODE : int,
	L_MAMODE : int,
	L_ACKMAMODE : int,
	Q_MAMODE : int
};
type AVar800 = Var800 ^33 ;
type SVar800 = { 
	 N_ITER : int,
	 Array : AVar800
};

type
Mode_profile = { 
	NID_PACKET : int 	 /* Packet =  80 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_MAMODE : int ,
	M_MAMODE : int ,
	V_MAMODE : int ,
	L_MAMODE : int ,
	L_ACKMAMODE : int ,
	Q_MAMODE : int ,
	Struct45 : SVar800
};


type
Level_Crossing_information = { 
	NID_PACKET : int 	 /* Packet =  88 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	NID_LX : int ,
	D_LX : int ,
	L_LX : int ,
	Q_LXSTATUS : int ,
	V_LX : int ,
	Q_STOPLX : int ,
	L_STOPLX : int 
};


type
Track_Ahead_Free_up_to_level_23_transition_location = { 
	NID_PACKET : int 	 /* Packet =  90 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_NEWCOUNTRY : int ,
	NID_C : int ,
	NID_BG : int 
};


type
RBC_transition_order = { 
	NID_PACKET : int 	 /* Packet = 131 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_RBCTR : int ,
	NID_C : int ,
	NID_RBC : int ,
	NID_RADIO : int ,
	Q_SLEEPSESSION : int 
};


type
Danger_for_Shunting_information = { 
	NID_PACKET : int 	 /* Packet = 132 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_ASPECT : int 
};


type
Radio_infill_area_information = { 
	NID_PACKET : int 	 /* Packet = 133 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	Q_RIU : int ,
	NID_C : int ,
	NID_RIU : int ,
	NID_RADIO : int ,
	D_INFILL : int ,
	NID_BG : int 
};


type
EOLM_Packet = { 
	NID_PACKET : int 	 /* Packet = 134 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	NID_LOOP : int ,
	D_LOOP : int ,
	L_LOOP : int ,
	Q_LOOPDIR : int ,
	Q_SSCODE : int 
};


type
Stop_Shunting_on_desk_opening = { 
	NID_PACKET : int 	 /* Packet = 135 */ ,
	Q_DIR : int ,
	L_PACKET : int 
};


type
Infill_location_reference = { 
	NID_PACKET : int 	 /* Packet = 136 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_NEWCOUNTRY : int ,
	NID_C : int ,
	NID_BG : int 
};


type
Stop_if_in_Staff_Responsible = { 
	NID_PACKET : int 	 /* Packet = 137 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SRSTOP : int 
};


type
Reversing_area_information = { 
	NID_PACKET : int 	 /* Packet = 138 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_STARTREVERSE : int ,
	L_REVERSEAREA : int 
};


type
Reversing_supervision_information = { 
	NID_PACKET : int 	 /* Packet = 139 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_SCALE : int ,
	D_REVERSE : int ,
	V_REVERSE : int 
};


type
Train_running_number_from_RBC = { 
	NID_PACKET : int 	 /* Packet = 140 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	NID_OPERATIONAL : int 
};


type
Default_Gradient_for_Temporary_Speed_Restriction = { 
	NID_PACKET : int 	 /* Packet = 141 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_GDIR : int ,
	G_TSR : int 
};


type
Session_Management_with_neighbouring_Radio_Infill_Unit = { 
	NID_PACKET : int 	 /* Packet = 143 */ ,
	Q_DIR : int ,
	L_PACKET : int ,
	Q_RIU : int ,
	NID_C : int ,
	NID_RIU : int ,
	NID_RADIO : int 
};


type
Inhibition_of_balise_group_message_consistency_reaction = { 
	NID_PACKET : int 	 /* Packet = 145 */ ,
	Q_DIR : int ,
	L_PACKET : int 
};


type
Default_balise_or_Loop_or_RIU_information = { 
	NID_PACKET : int 	 /* Packet = 254 */ ,
	Q_DIR : int ,
	L_PACKET : int 
};


end;
package TrainToTrack

type
Position_Report = { 
	NID_PACKET : int 	 /* Packet =   0 */ ,
	L_PACKET : int ,
	qscale : Q_SCALE ,
	NID_LRBG : int ,
	D_LRBG : int ,
	dirlrbg : Q_DIRLRBG ,
	dlrbg: Q_DLRBG ,
	L_DOUBTOVER : int ,
	L_DOUBTUNDER : int ,
	length : Q_LENGTH ,
	L_TRAININT : int ,
	V_TRAIN : int ,
	dirtrain : Q_DIRTRAIN ,
	mode: M_MODE ,
	level : M_LEVEL ,
	NID_NTC : int 
};


type
Position_Report_based_on_two_balise_groups = { 
	NID_PACKET : int 	 /* Packet =   1 */ ,
	L_PACKET : int ,
	qscale : Q_SCALE ,
	NID_LRBG : int ,
	NID_PRVLRBG : int ,
	D_LRBG : int ,
	dirlrbg : Q_DIRLRBG ,
	dlrbg: Q_DLRBG ,
	L_DOUBTOVER : int ,
	L_DOUBTUNDER : int ,
	length : Q_LENGTH ,
	L_TRAININT : int ,
	V_TRAIN : int ,
	dirtrain : Q_DIRTRAIN ,
	mode: M_MODE ,
	level : M_LEVEL ,
	NID_NTC : int 
};


type Var30 = { 
	NID_RADIO : int
};
type AVar30 = Var30 ^33 ;
type SVar30 = { 
	 N_ITER : int,
	 Array : AVar30
};

type
Onboard_telephone_numbers = { 
	NID_PACKET : int 	 /* Packet =   3 */ ,
	L_PACKET : int ,
	Struct46 : SVar30
};


type
Error_reporting = { 
	NID_PACKET : int 	 /* Packet =   4 */ ,
	L_PACKET : int ,
	error : M_ERROR 
};


type
Train_running_number = { 
	NID_PACKET : int 	 /* Packet =   5 */ ,
	L_PACKET : int ,
	NID_OPERATIONAL : int 
};


type
Level_23_transition_information = { 
	NID_PACKET : int 	 /* Packet =   9 */ ,
	L_PACKET : int ,
	NID_LTRBG : int 
};


type Var110 = { 
	M_VOLTAGE : int,
	NID_CTRACTION : int
};
type AVar110 = Var110 ^33 ;
type SVar110 = { 
	 N_ITER : int,
	 Array : AVar110
};

type Var111 = { 
	NID_NTC : int
};
type AVar111 = Var111 ^33 ;
type SVar111 = { 
	 N_ITER : int,
	 Array : AVar111
};

type
Validated_train_data = { 
	NID_PACKET : int 	 /* Packet =  11 */ ,
	L_PACKET : int ,
	NC_CDTRAIN : int ,
	NC_TRAIN : int ,
	L_TRAIN : int ,
	V_MAXTRAIN : int ,
	M_LOADINGGAUGE : int ,
	M_AXLELOADCAT : int ,
	M_AIRTIGHT : int ,
	N_AXLE : int ,
	Struct47 : SVar110,
	Struct48 : SVar111
};


type
Data_used_by_applications_outside_the_ERTMS_or_ETCS_system = { 
	NID_PACKET : int 	 /* Packet =  44 */ ,
	L_PACKET : int ,
	NID_XUSER : int ,
	Other_data_depending_on__NID_XUSER :  int
};


end;
package BothWays

type
End_of_Information = { 
	NID_PACKET : int 	 /* Packet = 255 */ 
};


end;
